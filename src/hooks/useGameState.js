import { useState, useCallback, useEffect } from 'react';
import { initialBoardPiecesObject } from '../data/positions';
import { loadGameState, saveGameState, clearGameState } from '../storage/localStorageService';

// –Ñ–¥–∏–Ω–µ –î–∂–µ—Ä–µ–ª–æ –Ü—Å—Ç–∏–Ω–∏: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¶–ï —Å–∫—Ä—ñ–∑—å
const INITIAL_GAME_BASE_STATE = {
  boardPiecesObject: initialBoardPiecesObject,
  selectedSquare: null,
  whiteTime: 180000,
  blackTime: 180000,
  currentTurn: 'w',
  moveHistory: [],
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ñ—ñ–≥—É—Ä–∏
/**
 * –í–∏–∑–Ω–∞—á–∞—î –∫–æ–ª—ñ—Ä —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ó—ó FEN-—Å–∏–º–≤–æ–ª—É.
 * 'P', 'R', 'K' -> 'w' (White)
 * 'p', 'r', 'k' -> 'b' (Black)
 */
export const getPieceColor = (fenSymbol) => {
    if (!fenSymbol) {
        return null; // –ü–æ—Ä–æ–∂–Ω—è –∫–ª—ñ—Ç–∏–Ω–∫–∞
    }

    // ‚úÖ –Ø–∫—â–æ —Å–∏–º–≤–æ–ª –¥–æ—Ä—ñ–≤–Ω—é—î —Å–≤–æ—ó–π –≤–µ—Ä—Å—ñ—ó —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'P' === 'P'), —Ü–µ –±—ñ–ª–∞ —Ñ—ñ–≥—É—Ä–∞.
    if (fenSymbol === fenSymbol.toUpperCase()) {
        return 'w';
    } 
    // –Ü–Ω–∞–∫—à–µ, —Ü–µ —á–æ—Ä–Ω–∞ —Ñ—ñ–≥—É—Ä–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 'p' !== 'P').
    return 'b';
};

// –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–ù–£ –ó LOCAL STORAGE (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ)
const getInitialState = () => { // –ë—ñ–ª—å—à–µ –Ω–µ –ø—Ä–∏–π–º–∞—î initialBoardPiecesObject, –±–æ –≤–æ–Ω–æ –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ñ
  const savedState = loadGameState();

  if (savedState && savedState.gameId) {
    console.log("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω.");
    return savedState;
  }

  console.log("üÜï –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

  return {
    ...INITIAL_GAME_BASE_STATE, // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω—É –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    gameId: Date.now().toString(), // –ù–æ–≤–∏–π, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
  };
};

export const useGameState = (socketRef = { current: null }) => {

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é getInitialState
  const [gameState, setGameState] = useState(getInitialState);

  // === üéØ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø: –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó LOCAL STORAGE ===
  useEffect(() => {
    saveGameState(gameState);
  }, [gameState]);


  // === –õ–û–ì–Ü–ö–ê –û–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–ù–£ –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–ì–û –•–û–î–£ ===
  // –í–∏–Ω–æ—Å–∏–º–æ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —ñ–Ω—à–∏–º–∏
  const simulateMoveUpdate = useCallback((from, to, piece, newBoard) => {
    setGameState(prev => {
      const newTurn = prev.currentTurn === 'w' ? 'b' : 'w';
      console.log(`[LOCAL SIMULATION] –•—ñ–¥: ${from} -> ${to}. –ù–æ–≤–∞ —á–µ—Ä–≥–∞: ${newTurn}`);

      return {
        ...prev,
        boardPiecesObject: newBoard,
        currentTurn: newTurn,
        moveHistory: [...prev.moveHistory, { from, to, piece, turn: prev.currentTurn }],
      };
    });
  }, []); // –ù–µ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ gameState, –±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è


  // üÜï –õ–û–ì–Ü–ö–ê –°–ö–ò–î–ê–ù–ù–Ø –ì–†–ò
  const resetGameState = useCallback(() => {
    console.log("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏...");
    clearGameState();
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setGameState –∑ —Ñ—É–Ω–∫—Ü—ñ—î—é –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    setGameState(getInitialState());
  }, []);


  // üÜï –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò –û–ù–û–í–õ–ï–ù–¨ –Ü–ó –°–ï–†–í–ï–†–ê (–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–≤–Ω–æ—Ç–∏)
  const handleServerUpdate = useCallback((newGameState) => {
    console.log("üì° –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ —Å–µ—Ä–≤–µ—Ä–∞.");
    // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
    // setGameState(newGameState); 
  }, []);


  // === –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –û–ë–†–û–ë–ö–ê –ö–õ–Ü–ö–£ ===
  const handleSquareClick = useCallback((squareId) => {

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ —Å—Ç–∞–Ω—É
    setGameState(prev => {
      // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (prev) –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ!
      const { boardPiecesObject, selectedSquare, currentTurn } = prev;

      console.log(`‚û°Ô∏è [CLICK] –ö–ª—ñ–∫ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ: ${squareId}. –í–∏–±—Ä–∞–Ω–∞ —Ñ—ñ–≥—É—Ä–∞: ${selectedSquare}`);
      console.log(boardPiecesObject)
      console.log(selectedSquare)
      console.log(currentTurn)
      console.log(squareId)

      const piece = boardPiecesObject[squareId];

      // 1. –ü–ï–†–®–ò–ô –ö–õ–Ü–ö: –í–ò–ë–Ü–† –§–Ü–ì–£–†–ò
      if (selectedSquare === null && piece) {
        console.log(selectedSquare)

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–≥–∏
        if (getPieceColor(piece) !== currentTurn) {
          console.warn(`üõë [ERROR] –°–ø—Ä–æ–±–∞ —Ö–æ–¥–∏—Ç–∏ –Ω–µ —Å–≤–æ—î—é —Ñ—ñ–≥—É—Ä–æ—é.`);
          return prev; // –ó–∞–ª–∏—à–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–∞–Ω
        }

        console.log(`‚úÖ [CLICK 1] –í–∏–±—Ä–∞–Ω–æ —Ñ—ñ–≥—É—Ä—É –Ω–∞ ${squareId}.`);
        return { ...prev, selectedSquare: squareId };
      }

      // 2. –î–†–£–ì–ò–ô –ö–õ–Ü–ö: –°–ü–†–û–ë–ê –ó–†–û–ë–ò–¢–ò –•–Ü–î
      else if (selectedSquare !== null) {

        const fromSquare = selectedSquare;
        const toSquare = squareId;

        console.log(`‚û°Ô∏è [CLICK 2] –°–ø—Ä–æ–±–∞ —Ö–æ–¥—É –∑ ${fromSquare} –Ω–∞ ${toSquare}.`);

        // –°–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è, —è–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É —Å–∞–º—É –∫–ª—ñ—Ç–∏–Ω–∫—É
        if (fromSquare === toSquare) {
          console.log("‚û°Ô∏è [DESELECT] –ö–ª—ñ–∫ –Ω–∞ —Ç—ñ–π —Å–∞–º—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ. –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä.");
          return { ...prev, selectedSquare: null };
        }

        const pieceToMove = boardPiecesObject[fromSquare];
        const pieceOnTarget = boardPiecesObject[toSquare];

        if (pieceToMove) {

          // –ó–ê–ë–û–†–û–ù–ê –ë–ò–¢–ò –°–í–Ü–ô –ö–û–õ–Ü–†
          if (pieceOnTarget && getPieceColor(pieceOnTarget) === getPieceColor(pieceToMove)) {
            console.warn("üõë [ERROR] –ù–µ –º–æ–∂–Ω–∞ –±–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É —Å–≤–æ–≥–æ –∫–æ–ª—å–æ—Ä—É. –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä.");
            // –¢—É—Ç –∑–∞ –ª–æ–≥—ñ–∫–æ—é —à–∞—Ö—ñ–≤, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à—É —Ñ—ñ–≥—É—Ä—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—É—Ç–∏ –≤–∏–±—ñ—Ä.
            return { ...prev, selectedSquare: toSquare };
          }

          // üõë –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø: –¢—É—Ç –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –í–ê–õ–Ü–î–ù–û–°–¢–Ü —Ö–æ–¥—É (–ß–∏ –º–æ–∂–µ –∫—ñ–Ω—å —Å—é–¥–∏ –ø—ñ—Ç–∏?)
          // –ó–∞—Ä–∞–∑ –º–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ –±—É–¥—å-—è–∫–∏–π —Ö—ñ–¥
          console.log("üî• [MOVE] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–æ—à–∫–∏...");

          // –Ü–ú–£–¢–ê–ë–ï–õ–¨–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–û–®–ö–ò
          const newBoard = { ...boardPiecesObject };
          delete newBoard[fromSquare];
          newBoard[toSquare] = pieceToMove;

          // –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –≤—Å–µ —â–µ –≤ setGameState, –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ simulateMoveUpdate.
          // –ú–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ–Ω–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –ü–†–Ø–ú–û –¢–£–¢:
          const newTurn = currentTurn === 'w' ? 'b' : 'w';

          // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏ (–≤–∫–ª—é—á–∞—é—á–∏ —Å–∫–∏–¥–∞–Ω–Ω—è selectedSquare)
          return {
            ...prev,
            boardPiecesObject: newBoard,
            currentTurn: newTurn,
            moveHistory: [...prev.moveHistory, { from: fromSquare, to: toSquare, piece: pieceToMove, turn: currentTurn }],
            selectedSquare: null, // –°–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è
          };

        } else {
          console.error(`üõë [ERROR] –ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –≤–∏–±—Ä–∞–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ ${fromSquare}.`);
        }
      }
      // –Ø–∫—â–æ –º–∏ –¥—ñ—Å—Ç–∞–ª–∏—Å—è —Å—é–¥–∏, —Å—Ç–∞–Ω –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
      return prev;
    });
  }, []); 

  return {
    gameState,
    handleSquareClick,
    handleServerUpdate, // ‚úÖ –¢–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–µ–Ω–æ
    resetGameState, ¬† ¬† // ‚úÖ –¢–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–µ–Ω–æ
    // –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ simulateMoveUpdate, —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω –∑–æ–≤–Ω—ñ
    simulateMoveUpdate
  };
};