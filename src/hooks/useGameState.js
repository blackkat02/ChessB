import { useState, useCallback, useEffect } from 'react';
import { initialBoardPiecesObject } from '../data/positions';
import { loadGameState, saveGameState, clearGameState } from '../storage/localStorageService';

// –Ñ–¥–∏–Ω–µ –î–∂–µ—Ä–µ–ª–æ –Ü—Å—Ç–∏–Ω–∏
const INITIAL_GAME_STATE = {
  boardPiecesObject: initialBoardPiecesObject,
  selectedSquare: null,
  whiteTime: 180000,
  blackTime: 180000,
  currentTurn: 'w',
  gameId: 'test-game-123',
  moveHistory: [],
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ñ—ñ–≥—É—Ä–∏
const getPieceColor = (pieceSymbol) => {
  return pieceSymbol ? pieceSymbol[0] : null;
};

// –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–ù–£ –ó LOCAL STORAGE (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ)
const getInitialState = (initialBoardPiecesObject) => {
  const savedState = loadGameState();

  if (savedState && savedState.gameId) {
    console.log("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω.");
    return savedState;
  }

  console.log("üÜï –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");

  return {
    boardPiecesObject: initialBoardPiecesObject,
    selectedSquare: null,
    whiteTime: 180000,
    blackTime: 180000,
    currentTurn: 'w',
    gameId: Date.now().toString(), // –ù–æ–≤–∏–π, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
    moveHistory: [],
  };
};

export const useGameState = (socketRef = { current: null }) => {

  const [gameState, setGameState] = useState(() => getInitialState(initialBoardPiecesObject));
  const { boardPiecesObject, selectedSquare, currentTurn } = gameState;

  // === üéØ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø: –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó LOCAL STORAGE ===
  useEffect(() => {
    saveGameState(gameState);
  }, [gameState]);

  const simulateMoveUpdate = (from, to, piece, newBoard) => {
    setGameState(prev => {
      const newTurn = prev.currentTurn === 'w' ? 'b' : 'w';

      // ... (–æ–±'—î–∫—Ç newMove) ...

      console.log(`[LOCAL SIMULATION] –•—ñ–¥: ${from} -> ${to}. –ù–æ–≤–∞ —á–µ—Ä–≥–∞: ${newTurn}`);

      return {
        ...prev,
        boardPiecesObject: newBoard,
        currentTurn: newTurn,
        moveHistory: [...prev.moveHistory, { from, to, piece, turn: prev.currentTurn }],
      };
    });
  };

  // üÜï –õ–û–ì–Ü–ö–ê –°–ö–ò–î–ê–ù–ù–Ø –ì–†–ò
  const resetGameState = useCallback(() => {
    console.log("üîÑ –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏...");
    // –û—á–∏—Å—Ç–∏—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ
    clearGameState();
    // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω (–∑–≥–µ–Ω–µ—Ä—É–≤–∞–≤—à–∏ –Ω–æ–≤–∏–π gameId, —â–æ–± –Ω–µ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É–≤–∞—Ç–∏ –∑—ñ —Å—Ç–∞—Ä–∏–º)
    setGameState(getInitialState(initialBoardPiecesObject));
  }, []);

  // üÜï –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò –û–ù–û–í–õ–ï–ù–¨ –Ü–ó –°–ï–†–í–ï–†–ê (–ó–∞–≥–ª—É—à–∫–∞)
  const handleServerUpdate = useCallback((newGameState) => {
    console.log("üì° –û—Ç—Ä–∏–º–∞–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ —Å–µ—Ä–≤–µ—Ä–∞.");
    // –í —Ä–µ–∞–ª—å–Ω—ñ–π –≥—Ä—ñ: setGameState(newGameState);
  }, []);

  // === –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –û–ë–†–û–ë–ö–ê –ö–õ–Ü–ö–£ ===
  const handleSquareClick = useCallback((squareId) => {

    // üÜï –õ–û–ì 1: –ó–∞–≥–∞–ª—å–Ω–∏–π –ª–æ–≥ –¥–ª—è –≤—Ö–æ–¥—É –≤ —Ñ—É–Ω–∫—Ü—ñ—é
    console.log(`‚û°Ô∏è [CLICK] –ö–ª—ñ–∫ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ: ${squareId}. –í–∏–±—Ä–∞–Ω–∞ —Ñ—ñ–≥—É—Ä–∞: ${selectedSquare}`);

    const piece = boardPiecesObject[squareId];

    // 1. –ü–ï–†–®–ò–ô –ö–õ–Ü–ö: –í–ò–ë–Ü–† –§–Ü–ì–£–†–ò
    if (selectedSquare === null && piece) {

      // ... (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–≥–∏) ...

      setGameState(prev => ({ ...prev, selectedSquare: squareId }));
      console.log(`‚úÖ [CLICK 1] –í–∏–±—Ä–∞–Ω–æ —Ñ—ñ–≥—É—Ä—É –Ω–∞ ${squareId}.`);

    }

    // 2. –î–†–£–ì–ò–ô –ö–õ–Ü–ö: –°–ü–†–û–ë–ê –ó–†–û–ë–ò–¢–ò –•–Ü–î
    else if (selectedSquare !== null) {

      const fromSquare = selectedSquare;
      const toSquare = squareId;

      // üÜï –õ–û–ì 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤—ñ–π—à–ª–∏ –º–∏ —É –±–ª–æ–∫ –¥—Ä—É–≥–æ–≥–æ –∫–ª—ñ–∫—É
      console.log(`‚û°Ô∏è [CLICK 2] –°–ø—Ä–æ–±–∞ —Ö–æ–¥—É –∑ ${fromSquare} –Ω–∞ ${toSquare}.`);

      // –°–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è, —è–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É —Å–∞–º—É –∫–ª—ñ—Ç–∏–Ω–∫—É
      if (fromSquare === toSquare) {
        console.log("‚û°Ô∏è [DESELECT] –ö–ª—ñ–∫ –Ω–∞ —Ç—ñ–π —Å–∞–º—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ. –°–∫–∏–¥–∞—î–º–æ –≤–∏–±—ñ—Ä.");
        setGameState(prev => ({ ...prev, selectedSquare: null }));
        return;
      }

      const pieceToMove = boardPiecesObject[fromSquare];
      const pieceOnTarget = boardPiecesObject[toSquare];

      if (pieceToMove) {
        // ... (–ù–û–í–ò–ô –ö–û–ù–¢–†–û–õ–¨: –ó–ê–ë–û–†–û–ù–ê –ë–ò–¢–ò –°–í–Ü–ô –ö–û–õ–Ü–†) ...

        if (pieceOnTarget && getPieceColor(pieceOnTarget) === getPieceColor(pieceToMove)) {
          // ... (–ª–æ–≥—ñ–∫–∞ –ø–æ–º–∏–ª–∫–∏, —Å–∫–∏–¥–∞–Ω–Ω—è selectedSquare: null) ...
          return;
        }

        // üÜï –õ–û–ì 3: –Ø–∫—â–æ –º–∏ –¥—ñ—Å—Ç–∞–ª–∏—Å—è —Å—é–¥–∏, —Ç–æ —Ö—ñ–¥ –¥–æ–∑–≤–æ–ª–µ–Ω–æ (–∑–∞ –ª–æ–∫–∞–ª—å–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é)
        console.log("üî• [MOVE] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –¥–æ—à–∫–∏...");

        // –Ü–ú–£–¢–ê–ë–ï–õ–¨–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–û–®–ö–ò
        const newBoard = { ...boardPiecesObject };
        delete newBoard[fromSquare];
        newBoard[toSquare] = pieceToMove;

        // –í–ò–ö–õ–ò–ö –õ–û–ö–ê–õ–¨–ù–û–á –°–ò–ú–£–õ–Ø–¶–Ü–á (–û–ù–û–í–ò–¢–¨ –°–¢–ê–ù)
        simulateMoveUpdate(fromSquare, toSquare, pieceToMove, newBoard);
      } else {
        // üÜï –õ–û–ì 4: –Ø–∫—â–æ –∑ fromSquare –∑–Ω–∏–∫–ª–∞ —Ñ—ñ–≥—É—Ä–∞ (–º–∞—î –±—É—Ç–∏ –ø–æ–º–∏–ª–∫–∞)
        console.error(`üõë [ERROR] –ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ –≤–∏–±—Ä–∞–Ω—ñ–π –∫–ª—ñ—Ç–∏–Ω—Ü—ñ ${fromSquare}.`);
      }

      // –ó–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ —Ö–æ–¥—É
      setGameState(prev => ({ ...prev, selectedSquare: null }));
    }

    // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–ª—é—á–∞—Ç–∏ –í–°–ï, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ó–û–í–ù–Ü setGameState
    // –ó–∞–ª–∏—à–∞—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω—ñ
  }, [boardPiecesObject, selectedSquare, currentTurn, simulateMoveUpdate]);
  return {
    gameState,
    handleSquareClick,
    handleServerUpdate, // <--- –¢–ï–ü–ï–† –í–û–ù–ê –í–ò–ó–ù–ê–ß–ï–ù–ê
    resetGameState // <--- –¢–ï–ü–ï–† –í–û–ù–ê –í–ò–ó–ù–ê–ß–ï–ù–ê
  };
};