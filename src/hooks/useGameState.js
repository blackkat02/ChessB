// src/hooks/useGameState.js

import { useState, useCallback, useEffect } from 'react'; // <--- –î–û–î–ê–ù–û useEffect!
import { initialBoardPiecesObject } from '../data/positions';
import { loadGameState, saveGameState } from '../storage/localStorageService';

// –Ñ–¥–∏–Ω–µ –î–∂–µ—Ä–µ–ª–æ –Ü—Å—Ç–∏–Ω–∏
const INITIAL_GAME_STATE = {
    boardPiecesObject: initialBoardPiecesObject,
    selectedSquare: null,
    whiteTime: 180000,
    blackTime: 180000,
    currentTurn: 'w',
    gameId: 'test-game-123',
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Ñ—ñ–≥—É—Ä–∏
const getPieceColor = (pieceSymbol) => {
    return pieceSymbol ? pieceSymbol[0] : null;
};

// –í–Ü–î–ù–û–í–õ–ï–ù–ù–Ø –°–¢–ê–ù–£ –ó LOCAL STORAGE (–∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ)
const getInitialState = (initialBoardPiecesObject) => {
    // 1. –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
    const savedState = loadGameState(); 
    
    // –Ø–∫—â–æ loadGameState –ø–æ–≤–µ—Ä–Ω—É–≤ —Å—Ç–∞–Ω –Ü —Ü–µ–π —Å—Ç–∞–Ω –º–∞—î gameId (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Å—Ç–∞—Ä–∏—Ö/–ø–æ—à–∫–æ–¥–∂–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤)
    if (savedState && savedState.gameId) { 
        console.log("üíæ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω.");
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Å—Ç–∞–Ω
        return savedState; 
    }

    // =========================================================
    // üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø –°–ò–ù–¢–ê–ö–°–ò–°–£: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è, —è–∫—â–æ savedState –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ.
    // =========================================================
    console.log("üÜï –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω –≥—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑ INITIAL_GAME_STATE 
    // —Ç–∞ –¥–æ–¥–∞—é—á–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ (unique gameId, empty moveHistory)
    return {
        boardPiecesObject: initialBoardPiecesObject,
        selectedSquare: null,
        whiteTime: 180000,
        blackTime: 180000,
        currentTurn: 'w',
        gameId: Date.now().toString(), // –ù–æ–≤–∏–π, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏
        moveHistory: [], 
    };
};

export const useGameState = (socketRef = { current: null }) => {
    
    // =================================================================
    // üéØ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –¢–µ–ø–µ—Ä useState –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ—é-—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ç–æ—Ä!
    // =================================================================
    const [gameState, setGameState] = useState(() => getInitialState(initialBoardPiecesObject));
    
    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É—î–º–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç–∏ —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ useCallback
    // –ü—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è this line: const { boardPiecesObject, selectedSquare, currentTurn } = gameState;
    const { boardPiecesObject, selectedSquare, currentTurn } = gameState;

    // === üéØ –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø: –°–ò–ù–•–†–û–ù–Ü–ó–ê–¶–Ü–Ø –ó LOCAL STORAGE ===
    useEffect(() => {
        // saveGameState –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∫–æ–∂–Ω—ñ–π –∑–º—ñ–Ω—ñ gameState
        saveGameState(gameState);
    }, [gameState]);

    const simulateMoveUpdate = (from, to, piece, newBoard) => {
        setGameState(prev => {
            const newTurn = prev.currentTurn === 'w' ? 'b' : 'w';

            const newMove = {
                id: prev.moveHistory.length + 1,
                from: from,
                to: to,
                piece: piece,
                turn: prev.currentTurn,
                // whiteTime: prev.whiteTime, // –î–æ–¥–∞–π, –∫–æ–ª–∏ –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Ç–∞–π–º–µ—Ä–∞
                // blackTime: prev.blackTime
            };

            console.log(`[LOCAL SIMULATION] –•—ñ–¥: ${from} -> ${to}. –ù–æ–≤–∞ —á–µ—Ä–≥–∞: ${newTurn}`);
            
            return {
                ...prev,
                boardPiecesObject: newBoard,
                currentTurn: newTurn,
                moveHistory: [...prev.moveHistory, newMove], // <--- –î–û–î–ê–ù–û: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ö–æ–¥—ñ–≤
            };
        });
    };


    // === –û–°–ù–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –û–ë–†–û–ë–ö–ê –ö–õ–Ü–ö–£ ===
    const handleSquareClick = useCallback((squareId) => {
        const piece = boardPiecesObject[squareId];

        // 1. –ü–ï–†–®–ò–ô –ö–õ–Ü–ö: –í–ò–ë–Ü–† –§–Ü–ì–£–†–ò
        if (selectedSquare === null && piece) {
            const pieceColor = getPieceColor(piece);
            
            // –ü–ï–†–ï–í–Ü–†–ö–ê –ß–ï–†–ì–ò: –ó–ê–ë–û–†–û–ù–ê –í–ò–ë–û–†–£ –ß–£–ñ–û–á –§–Ü–ì–£–†–ò
            if (pieceColor !== currentTurn) {
                console.warn(`–•—ñ–¥ –≥—Ä–∞–≤—Ü—è ${currentTurn}. –ù–µ –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ —Ñ—ñ–≥—É—Ä—É –∫–æ–ª—å–æ—Ä—É ${pieceColor}.`);
                return;
            }

            setGameState(prev => ({ ...prev, selectedSquare: squareId }));
        }

        // 2. –î–†–£–ì–ò–ô –ö–õ–Ü–ö: –°–ü–†–û–ë–ê –ó–†–û–ë–ò–¢–ò –•–Ü–î
        else if (selectedSquare !== null) {
            const fromSquare = selectedSquare;
            const toSquare = squareId;

            // –°–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è, —è–∫—â–æ –∫–ª—ñ–∫–Ω—É–ª–∏ –Ω–∞ —Ç—É —Å–∞–º—É –∫–ª—ñ—Ç–∏–Ω–∫—É
            if (fromSquare === toSquare) {
                setGameState(prev => ({ ...prev, selectedSquare: null }));
                return;
            }

            const pieceToMove = boardPiecesObject[fromSquare];
            const pieceOnTarget = boardPiecesObject[toSquare]; // <--- –§—ñ–≥—É—Ä–∞ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è

            if (pieceToMove) {
                
                // === –ù–û–í–ò–ô –ö–û–ù–¢–†–û–õ–¨: –ó–ê–ë–û–†–û–ù–ê –ë–ò–¢–ò –°–í–Ü–ô –ö–û–õ–Ü–† ===
                if (pieceOnTarget) {
                    const targetPieceColor = getPieceColor(pieceOnTarget);
                    const movingPieceColor = getPieceColor(pieceToMove);

                    if (targetPieceColor === movingPieceColor) {
                        console.warn(`–ù–µ–º–æ–∂–ª–∏–≤–∏–π —Ö—ñ–¥: –ù–µ –º–æ–∂–Ω–∞ –±–∏—Ç–∏ —Ñ—ñ–≥—É—Ä—É —Å–≤–æ–≥–æ –∫–æ–ª—å–æ—Ä—É (${targetPieceColor}).`);
                        
                        // –ú–∏ –ù–ï —Ä–æ–±–∏–º–æ —Ö—ñ–¥, –∞–ª–µ –ø–µ—Ä–µ–º–∏–∫–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è (–∑–∞–ª–∏—à–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–æ—é –Ω–æ–≤—É —Ñ—ñ–≥—É—Ä—É)
                        // –ê–±–æ —Å–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è. –¢—É—Ç –≤–∏—Ä—ñ—à–µ–Ω–æ —Å–∫–∏–Ω—É—Ç–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏.
                        setGameState(prev => ({ ...prev, selectedSquare: null }));
                        return;
                    }
                }
                // ===============================================
                
                // –Ü–ú–£–¢–ê–ë–ï–õ–¨–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø –î–û–®–ö–ò
                const newBoard = { ...boardPiecesObject };
                delete newBoard[fromSquare]; 
                newBoard[toSquare] = pieceToMove;
                
                // –í–ò–ö–õ–ò–ö –õ–û–ö–ê–õ–¨–ù–û–á –°–ò–ú–£–õ–Ø–¶–Ü–á (–û–ù–û–í–ò–¢–¨ –°–¢–ê–ù)
                simulateMoveUpdate(fromSquare, toSquare, pieceToMove, newBoard);
            } else {
                console.warn(`–ù–µ–º–∞—î —Ñ—ñ–≥—É—Ä–∏ –Ω–∞ ${fromSquare}.`);
            }

            // –ó–∞–≤–∂–¥–∏ —Å–∫–∏–¥–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å–ø—Ä–æ–±–∏ —Ö–æ–¥—É
            setGameState(prev => ({ ...prev, selectedSquare: null }));
        }

    // –ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∫–ª—é—á–∞—Ç–∏ –í–°–ï, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ó–û–í–ù–Ü setGameState
    }, [boardPiecesObject, selectedSquare, currentTurn, simulateMoveUpdate]); 

    
    const handleServerUpdate = useCallback(() => {
        // –õ–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏, —á–∞—Å—É —Ç–∞ —á–µ—Ä–≥–∏
    }, []);

    return { gameState, handleSquareClick, handleServerUpdate };
};